var SLAClient;!function(a){angular.module("sla",["firebase"]).constant("firebaseUrl","https://sla-monitor-dev.firebaseio.com/")}(SLAClient||(SLAClient={}));var LiveMonitor;!function(a){var b=25,c=function(a){var b=a.interval,c=a.timeout,d=a.latestPing.datetime,e=3*(b+c)+250,f=new Date(d).getTime(),g=Date.now()-e;return f>g?"Online":"Offline"};angular.module("sla").directive("liveMonitor",["$firebaseObject","firebaseUrl","$interval",function(d,e,f){return{scope:{configId:"@",bufferSize:"@",templateUrl:"@"},templateUrl:function(a,b){if(!b.templateUrl)throw"liveMonitor: Directive is missing the required attribute 'templateUrl'";return b.templateUrl},link:function(g,h,i){if("undefined"==typeof g.configId)throw new Error('live-monitor: Missing required attribute "configId"');var j,k=g.bufferSize||b,l=new a.LatencyCalculator(k),m=new Firebase(e+g.configId),n=d(m),o=d(m.child("latestPing"));n.$loaded().then(function(){g.finishedLoadingConfig=!0,j=f(function(){g.monitorStatus=c(n)},250)}),o.$watch(function(){"Success"===o.status&&l.push(o.rtt)}),g.finishedLoadingConfig=!1,g.pingInfo=n,g.latestPing=o,g.getAverageRtt=function(){return l.getMovingAverage()},g.getJitter=function(){return l.getJitter()},h.on("$destory",function(){f.cancel(j),o.$destroy(),n.$destroy()})}}}])}(LiveMonitor||(LiveMonitor={}));var LiveMonitor;!function(a){angular.module("sla").filter("pingStatus",function(){return function(a){return"Success"===a?"Success":"TimedOut"===a?"Timed Out":"---"}})}(LiveMonitor||(LiveMonitor={}));var LiveMonitor;!function(a){var b=function(){function a(a){this.buffer=[],this.maxLength=a,this.pointer=0}return a.prototype.push=function(a){this.buffer[this.pointer]=a,this.pointer=(this.pointer+1)%this.maxLength},a.prototype.getMovingAverage=function(){var a=this.buffer,b=this.pointer,c=this.buffer.length,d=function(){return a.reduce(function(a,b,c){return c+1+a},0)}();return a.reduce(function(a,e,f){var g=f-b;0>g&&(g+=c);var h=(g+1)/d;return e*h+a},0)},a.prototype.getJitter=function(){if(this.buffer.length<=1)return 0;var a=Math.min.apply(Math,this.buffer),b=Math.max.apply(Math,this.buffer);return b-a},a}();a.LatencyCalculator=b}(LiveMonitor||(LiveMonitor={}));